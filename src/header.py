from codecs import ascii_decode
import csv
import pathlib
import os
import requests
import struct
from typing import Any, Dict, List

deffile = "n64.txt"
n64url = 'https://raw.githubusercontent.com/sanni/cartreader/master/sd/n64.txt'
r = requests.get(n64url, allow_redirects=True)
r.raise_for_status()
open(deffile, 'wb').write(r.content)

outfile = "n64txt.hpp"
#https://raw.githubusercontent.com/sanni/cartreader/master/sd/n64.txt
#example
'''
007 - The World Is Not Enough (Europe) (En,Fr,De).z64
002C3B2A,3B941695,32,0

007 - The World Is Not Enough (USA) (v2) (Beta).z64
6C180FEF,7BD65F9E,16,0

007 - The World Is Not Enough (USA) (v21) (Beta).z64
F0B6BF59,A92E0966,32,0

007 - The World Is Not Enough (USA).z64
26360987,033F4C13,32,0

'''

def parseInfo(info:str) -> Dict[str, Any]:
    partsDict: Dict[str, Any] = dict()
    parts:list[str] = info.split(',')
    partsDict['crc1'] = parts[0] #keep as hex
    partsDict['crc2'] = parts[1] #keep as hex
    partsDict['size'] = int(parts[2])
    partsDict['save'] = int(parts[3])
    return partsDict

def getFromCartDatabase() -> List[Dict[str, Dict[str, Any]]]:
    path = pathlib.Path(os.path.dirname(__file__), deffile).resolve()
    listRows = list()
    dataDictList:list[Dict[str, Dict[str, Any]]] = list()
    with open(path, 'r', newline='') as file:
        while(True):
            name = file.readline()
            info = file.readline()
            breakx = file.readline()
            print(name)
            if not name or not info or not breakx:
                break
            data:Dict[str, Dict[str, Any]] = dict()
            data['name'] = name.strip()
            data['info'] = parseInfo(info)
            dataDictList.append(data)
    return dataDictList


def main():
    lines:str = ""
    dataDictList = getFromCartDatabase()

    for entry in dataDictList:
        name = entry['name']
        crc1 = entry['info']['crc1']
        crc2 = entry['info']['crc2']
        size = entry['info']['size']
        save = entry['info']['save']

        lines += F"{{ 0x{crc1}, 0x{crc2}, {size}, {save}, \"{name}\" }},\n"

    path = pathlib.Path(os.path.dirname(__file__), outfile).resolve()
    with open(path, "w") as file:
        text:str = F"""#pragma once
#include <stdint.h>
#include <string>
//This file is autogenerated by header.py

struct headerEntry {{
    uint32_t gamecrc;
    uint32_t headcrc; 
    uint8_t size;
    uint8_t savetype;
    std::string name;
}};

//crc1, crc2, size, savetype, name
static headerEntry headerEntries[] = {{
{lines}
}};
        """
        file.write(text)
        file.flush()
if __name__=="__main__":
    main()



